generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  email               String          @unique
  password            String
  username            String          @unique
  phone               String          @unique
  image               String          @default("default")
  chats               Chat[]          @relation("ChatParticipants")
  sentMessages        Messages[]      @relation("SenderMessages")
  receivedMessages    Messages[]      @relation("RecipientMessages")
  sentFriendships     Friendship[]    @relation("FriendshipSender")
  receivedFriendships Friendship[]    @relation("FriendshipReceiver")
  ownedGroups         Group[]         @relation("OwnerGroups")
  groupMembers        GroupMember[]   @relation("UserGroups")
  groupMessages       GroupMessage[] @relation("GroupMessages")
  userModifiedFiles   ModifiedFiles[] @relation("userModifiedFile")
}

model Friendship {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  sender     User     @relation("FriendshipSender", fields: [senderId], references: [id])
  receiver   User     @relation("FriendshipReceiver", fields: [receiverId], references: [id])
}

model Chat {
  id           String     @id @default(cuid())
  participants User[]     @relation("ChatParticipants")
  messages     Messages[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Messages {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  chatId      String
  recipientId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chat      Chat @relation(fields: [chatId], references: [id])
  sender    User @relation("SenderMessages", fields: [senderId], references: [id])
  recipient User @relation("RecipientMessages", fields: [recipientId], references: [id])
}

model Otp {
  id        String   @id @default(cuid())
  otp       String
  email     String
  phone     String
  createdAt DateTime @default(now())
  expiresAt DateTime
  updatedAt DateTime @updatedAt
}

model Group {
  id           String          @id @default(cuid())
  groupName    String
  githubRepo   String
  ownerName    String
  githubAccessToken String
  ownerId      String
  createdAt    DateTime        @default(now())
  owner        User?           @relation("OwnerGroups", fields: [ownerId], references: [id])
  members      GroupMember[]   @relation("GroupToMembers")
  groupMessage GroupMessage[] @relation("GroupMessage")
  modifiedFiles ModifiedFiles[] @relation("modifiedFiles")
}

model GroupMember {
  id      String    @id @default(cuid())
  groupId String
  userId  String
  group   Group     @relation("GroupToMembers", fields: [groupId], references: [id])
  user    User      @relation("UserGroups", fields: [userId], references: [id])
  role    GroupRole @default(MEMBER)

  @@index([groupId])
  @@index([userId])
}

model Invite {
  id        String   @id @default(cuid())
  phone     String   @unique
  groupId   String
  status    String   @default("pending")
  createdAt DateTime

  @@unique([phone, groupId])
}

model GroupMessage {
  id         String   @id @default(cuid())
  groupId    String
  senderId   String
  senderName String?
  message    String
 createdAt DateTime @default(now())
  user       User     @relation("GroupMessages", fields: [senderId], references: [id])
  group      Group    @relation("GroupMessage", fields: [groupId], references: [id])
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  userId    String   @unique
  path      String   
  content   String   
  ownerId   String   @default("")
  ownerName String   @default("") 
  updatedAt DateTime @updatedAt
  group     String
  status    FileStatus @default(PENDING) 
}

model ModifiedFiles{
  id       Int     @id @default(autoincrement())
  name      String
  path      String
  content   String   @db.Text
  userId    String   @unique
  changes   Changes[]  @relation("changedFile")
  groupId   String
  modifiedById String?
  modifiedBy  User?     @relation("userModifiedFile",fields: [modifiedById], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation("modifiedFiles",fields: [groupId], references: [id])
}

model Changes{
  id        Int      @id @default(autoincrement())
  fileId    Int
  file      ModifiedFiles    @relation("changedFile",fields:[fileId],references: [id])
  type       String
  lineNumber Int
  content    String
  createdAt  DateTime  @default(now())
}

model Notifications{
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  userName  String
  ownerId   String
  ownerName String
  groupName String
  createdAt DateTime @default(now())
}
enum FileStatus {
  PENDING
  APPROVED
  REJECTED
}


enum GroupRole {
  ADMIN
  MEMBER
}
